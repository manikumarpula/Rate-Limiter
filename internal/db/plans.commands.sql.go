// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: plans.commands.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createPlan = `-- name: CreatePlan :one
INSERT INTO plans (
        account_id,
        name,
        rate_limit,
        burst_size,
        algorithm
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING id, account_id, name, rate_limit, burst_size, algorithm, created_at, updated_at
`

type CreatePlanParams struct {
	AccountID uuid.UUID `db:"account_id" json:"account_id"`
	Name      string    `db:"name" json:"name"`
	RateLimit int32     `db:"rate_limit" json:"rate_limit"`
	BurstSize int32     `db:"burst_size" json:"burst_size"`
	Algorithm Algorithm `db:"algorithm" json:"algorithm"`
}

func (q *Queries) CreatePlan(ctx context.Context, arg CreatePlanParams) (Plan, error) {
	row := q.db.QueryRow(ctx, createPlan,
		arg.AccountID,
		arg.Name,
		arg.RateLimit,
		arg.BurstSize,
		arg.Algorithm,
	)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.RateLimit,
		&i.BurstSize,
		&i.Algorithm,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePlan = `-- name: DeletePlan :exec
DELETE FROM plans
WHERE name = $1
`

func (q *Queries) DeletePlan(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deletePlan, name)
	return err
}

const updatePlan = `-- name: UpdatePlan :one
UPDATE plans
SET name = $2,
    rate_limit = $3,
    burst_size = $4,
    algorithm = $5,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, account_id, name, rate_limit, burst_size, algorithm, created_at, updated_at
`

type UpdatePlanParams struct {
	ID        int32     `db:"id" json:"id"`
	Name      string    `db:"name" json:"name"`
	RateLimit int32     `db:"rate_limit" json:"rate_limit"`
	BurstSize int32     `db:"burst_size" json:"burst_size"`
	Algorithm Algorithm `db:"algorithm" json:"algorithm"`
}

func (q *Queries) UpdatePlan(ctx context.Context, arg UpdatePlanParams) (Plan, error) {
	row := q.db.QueryRow(ctx, updatePlan,
		arg.ID,
		arg.Name,
		arg.RateLimit,
		arg.BurstSize,
		arg.Algorithm,
	)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.RateLimit,
		&i.BurstSize,
		&i.Algorithm,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
