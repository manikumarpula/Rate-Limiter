// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: api_keys.commands.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO api_keys (
        account_id,
        name,
        description,
        key,
        status,
        created_by,
        product,
        plan_id
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, account_id, name, description, key, status, created_by, last_used, requests_consumed, product, plan_id, created_at, updated_at
`

type CreateAPIKeyParams struct {
	AccountID   uuid.UUID `db:"account_id" json:"account_id"`
	Name        string    `db:"name" json:"name"`
	Description *string   `db:"description" json:"description"`
	Key         uuid.UUID `db:"key" json:"key"`
	Status      Status    `db:"status" json:"status"`
	CreatedBy   *string   `db:"created_by" json:"created_by"`
	Product     Product   `db:"product" json:"product"`
	PlanID      int32     `db:"plan_id" json:"plan_id"`
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, createAPIKey,
		arg.AccountID,
		arg.Name,
		arg.Description,
		arg.Key,
		arg.Status,
		arg.CreatedBy,
		arg.Product,
		arg.PlanID,
	)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.Description,
		&i.Key,
		&i.Status,
		&i.CreatedBy,
		&i.LastUsed,
		&i.RequestsConsumed,
		&i.Product,
		&i.PlanID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
DELETE FROM api_keys
WHERE id = $1
`

func (q *Queries) DeleteAPIKey(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAPIKey, id)
	return err
}

const updateAPIKey = `-- name: UpdateAPIKey :one
UPDATE api_keys
SET name = $2,
    description = $3,
    status = $4,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, account_id, name, description, key, status, created_by, last_used, requests_consumed, product, plan_id, created_at, updated_at
`

type UpdateAPIKeyParams struct {
	ID          int32   `db:"id" json:"id"`
	Name        string  `db:"name" json:"name"`
	Description *string `db:"description" json:"description"`
	Status      Status  `db:"status" json:"status"`
}

func (q *Queries) UpdateAPIKey(ctx context.Context, arg UpdateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, updateAPIKey,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Status,
	)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.Description,
		&i.Key,
		&i.Status,
		&i.CreatedBy,
		&i.LastUsed,
		&i.RequestsConsumed,
		&i.Product,
		&i.PlanID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
